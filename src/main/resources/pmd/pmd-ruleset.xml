<?xml version="1.0"?>
<!-- #%L Genome Damage and Stability Centre Analytics Package The GDSC Analytics package contains code to use the Google
  Analytics Measurement protocol to collect usage information about a Java application. %% Copyright (C) 2010 - 2018 Alex Herbert
  %% Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
  files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
  modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
  is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
  AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE. #L% -->

<ruleset name="customized" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
    This ruleset checks the code for discouraged programming constructs.
  </description>

  <rule ref="category/java/bestpractices.xml">
    <exclude name="UseVarargs" />
    <!-- Allow builders to construct classes using private constructors -->
    <exclude name="AccessorClassGeneration" />
  </rule>
  <rule ref="category/java/codestyle.xml/FieldNamingConventions">
    <properties>
      <property name="exclusions" value="serialVersionUID|logger" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
    <properties>
      <!-- Allow underscores using letters for add, subtract, multiply, divide.  -->
      <property name="finalVarPattern" value="[a-z][a-zA-Z0-9]*(_[asmd]_[a-zA-Z0-9]*)*" />
    </properties>
  </rule>
  <!-- This allows the commonly used construct for decrementing in a for loop. -->
  <rule ref="category/java/errorprone.xml/AssignmentInOperand">
    <properties>
      <property name="allowIncrementDecrement" value="true" />
    </properties>
  </rule>
  <!-- Allow 1 to be used in conditions as a magic number. -->
  <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
    <properties>
      <property name="ignoreMagicNumbers" value="-1,0,1" />
    </properties>
  </rule>
  <!-- This is to allow private fields to be undocumented. There are specific visibility checks done using Checkstyle. 'private'
    is OK but otherwise fields should be commented. -->
  <rule ref="category/java/documentation.xml/CommentRequired">
    <properties>
      <property name="fieldCommentRequirement" value="Ignored" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml">
    <exclude name="MethodArgumentCouldBeFinal" />
    <exclude name="ShortVariable" />
    <exclude name="LongVariable" />
    <exclude name="CommentDefaultAccessModifier" />
    <exclude name="DefaultPackage" />
    <exclude name="CallSuperInConstructor" />
    <exclude name="AbstractNaming" />
    <exclude name="UselessParentheses" />
    <exclude name="AtLeastOneConstructor" />
    <!-- <exclude name="GenericsNaming" /> -->
    <exclude name="OnlyOneReturn" />
    <!-- Allow builders to have setters that return something -->
    <exclude name="LinguisticNaming" />
  </rule>
  <rule ref="category/java/design.xml">
    <exclude name="TooManyMethods" />
    <exclude name="LawOfDemeter" />
    <exclude name="LoosePackageCoupling" />
    <!-- Allow builders to be big -->
    <exclude name="ExcessiveClassLength" />
    <exclude name="ExcessivePublicCount" />
    <exclude name="GodClass" />
  </rule>
  <rule ref="category/java/documentation.xml">
    <exclude name="CommentSize" />
  </rule>
  <rule ref="category/java/errorprone.xml">
    <exclude name="BeanMembersShouldSerialize" />
    <!-- This results in overflow during analysis and so is disabled. This rule is known to be poor with Java 5 and later:
      https://github.com/pmd/pmd/issues/873 -->
    <exclude name="DataflowAnomalyAnalysis" />
    <!-- Assigning objects to null to reset the state is allowed. -->
    <exclude name="NullAssignment" />
  </rule>
  <rule ref="category/java/multithreading.xml">
    <exclude name="DoNotUseThreads" />
    <exclude name="AvoidUsingVolatile" />
  </rule>
  <rule ref="category/java/performance.xml">
    <!-- This is used for 16-bit images so allow it.  -->
    <exclude name="AvoidUsingShortType" />
  </rule>

</ruleset>
